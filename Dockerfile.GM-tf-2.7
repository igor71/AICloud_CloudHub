FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04

MAINTAINER Igor Rabkin <igor.rabkin@xiaoyi.com>


################################################
#     Basic desktop environment                #
################################################

# Locale, language
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y locales
RUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
locale-gen
ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8


#################################################
#          Set Time Zone Asia/Jerusalem         #
################################################# 

ENV TZ=Asia/Jerusalem
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

#################################################
#     Very basic installations                  #
#################################################

RUN apt-get update && \
    DEBIAN_FRONTEND="noninteractive" apt-get -q install -y -o Dpkg::Options::="--force-confnew" --no-install-recommends \
    build-essential \
    software-properties-common \
    ffmpeg \
    curl \
    wget \
    git \
    htop \
    iputils-ping \
    rsync \
    cifs-utils \
    zip \
    unzip \
    tree \
    nano \
    tzdata \
    mlocate \
    sudo \
    sshpass \
    screen \
    pv && \
    dpkg-reconfigure -f noninteractive tzdata
    
    
#######################################
#            Installing cmake         #
#######################################

RUN \
    cd ~ && \
    version=3.11 && \
    build=3 && \
    mkdir ~/temp && \
    cd temp && \
    wget https://cmake.org/files/v$version/cmake-$version.$build.tar.gz && \
    tar -xzvf cmake-$version.$build.tar.gz && \
    cd cmake-$version.$build && \
    ./bootstrap && \
    make -j4 && \
    make install && \
    cmake --version && \
    cd ~ && \
    rm -rf temp

    	
#################################################
#             Tensorflow Dependences            #
#################################################

RUN DEBIAN_FRONTEND="noninteractive" apt-get -q install -y -o Dpkg::Options::="--force-confnew" --no-install-recommends \ 
    libcurl3-dev \
    libfreetype6-dev \
    libpng12-dev \
    libzmq3-dev \
    pkg-config \
    python-dev \
    zlib1g-dev && \  
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
	
	
################################	
# Updating PIP and Dependences #
################################

RUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

		
#################################################
#     Python Installations                      #
#################################################

RUN python -m pip --no-cache-dir install \
    ipykernel \ 
    h5py \
    Pillow \
    scipy \
    sklearn \
    pandas \
    numpy==1.14.5 \
    Flask_SocketIO==2.9.6 \
    Flask_Cors==3.0.3 \
    Flask==0.12.2 \
    redis==2.10.6 \
    pymongo==3.4.0 \
    APScheduler==3.3.1 \
    opencv_python==3.3.0.10  \
    socketIO_client==0.7.2 \
    requests==2.18.4 \
    Werkzeug==0.12.2 \
    PyPrind==2.11.2 \
    wget==3.2 \
    ffmpy==0.2.2 \
    simplejson==3.13.2 \
    eventlet==0.23.0 && \
    python -m ipykernel.kernelspec && \
    apt-get clean && \ 
    rm -rf /var/lib/apt/lists/*

    
##################################
# Install JRE 8 (latest edition) #
##################################

RUN apt-get -q update && \
    add-apt-repository -y ppa:openjdk-r/ppa && \
    DEBIAN_FRONTEND="noninteractive" apt-get -q install -y -o Dpkg::Options::="--force-confnew" --no-install-recommends openjdk-8-jre-headless &&\
    apt-get -q clean -y && rm -rf /var/lib/apt/lists/* && rm -f /var/cache/apt/*.bin
	
	
##############################################################
# Upgrade packages on image & Installing and Configuring SSH #
##############################################################

RUN apt-get -q update && \
    DEBIAN_FRONTEND="noninteractive" apt-get -q install -y -o Dpkg::Options::="--force-confnew" --no-install-recommends openssh-server && \
    rm -rf /var/lib/apt/lists/* && rm -f /var/cache/apt/*.bin

# SSH login fix. Otherwise user is kicked off after login
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd
RUN mkdir /var/run/sshd

ENV NOWVISIBLE "in users profile"
RUN echo "export VISIBLE=now" >> /etc/profile


########################################
#    Set sudoers users to the image    #
########################################

RUN useradd -m -d /home/xiaoyi -s /bin/bash xiaoyi && \
    echo "xiaoyi:Susyamtamidbayam" | chpasswd && \
    useradd -m -d /home/dev -s /bin/bash dev && \
    echo "dev:Lokonimhatulbasak" | chpasswd

# Add the users to sudoers group
RUN echo "xiaoyi  ALL=(ALL)  NOPASSWD: ALL" >> /etc/sudoers
    
# Set full permission for dev user home folder
RUN chmod -R 777 /home/dev

		
###################################
# Install TensorFlow GPU version. #
###################################
  RUN cd /
  ARG TFLOW=tensorflow-1.8.0-cp27-cp27mu-linux_x86_64.whl
  ARG CRED="server:123server123"
  RUN  curl -u ${CRED} ftp://yifileserver/DOCKER_IMAGES/Tensorflow/Current/${TFLOW} -o ${TFLOW} && \
       pip --no-cache-dir install ${TFLOW} && \
       rm -f ${TFLOW}


######################################################
#    Configure the build for our CUDA configuration. #
######################################################

ENV CI_BUILD_PYTHON=python
ENV LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
ENV TF_NEED_CUDA=1
ENV TF_CUDA_COMPUTE_CAPABILITIES=5.2,6.1
ENV TF_CUDA_VERSION=9.0
ENV TF_CUDNN_VERSION=7.0



################ INTEL MKL SUPPORT #################
ENV LIBRARY_PATH=/usr/local/lib:$LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
ARG CRED="server:123server123"
RUN cd /usr/local/lib && \
    curl -u ${CRED} ftp://yifileserver/IT/YiIT/lib/libiomp5.so -o libiomp5.so && \
    curl -u ${CRED} ftp://yifileserver/IT/YiIT/lib/libmklml_gnu.so -o libmklml_gnu.so && \
    curl -u ${CRED} ftp://yifileserver/IT/YiIT/lib/libmklml_intel.so -o libmklml_intel.so

####################################################


#######################################
# Copy Installation & Unitest Scripts #
#######################################
 
COPY gpu_tf_check.py unitest.py /
      
    
#########################################
# Add Welcome Message With Instructions #
#########################################

RUN echo '[ ! -z "$TERM" -a -r /etc/motd ] && cat /etc/issue && cat /etc/motd' \
	>> /etc/bash.bashrc \
	; echo "\
||||||||||||||||||||||||||||||||||||||||||||||||||\n\
|                                                |\n\
| Docker container running Ubuntu                |\n\
| with TensorFlow ${TF_BRANCH} optimized for GPU             |\n\
| with Intel(R) MKL Support                      |\n\
|                                                |\n\
||||||||||||||||||||||||||||||||||||||||||||||||||\n\
\n "\
	> /etc/motd


#####################
# Standard SSH Port #
#####################

EXPOSE 22


#####################
# Default command  #
#####################

CMD ["/usr/sbin/sshd", "-D"]
RUN ["/bin/bash"]
